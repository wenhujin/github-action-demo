name: mysql-agent version upgrade
run-name: Deploy to ${{ inputs.env }} mysql-agent ${{inputs.mysql-agent-version}} server-agent ${{inputs.server-agent-version}} by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'deployment env'
        required: true
        options:
          - mysql-master-dev
          - mysql-stage-dev
          - mysql-stage-prod
          - mysql-real-dev
          - mysql-real-prod
          - mysql-real-prod-sgp
      mysql-agent-version:
        type: string
        description: "mysql-agent version (ex: v0.1.55) | empty = run only server-agent upgrade"
      server-agent-version:
        type: string
        description: "server-agent version (ex: v0.0.30) | empty = run only mysql-agent upgrade"
      namespace:
        required: true
        type: string
        description: 'target namespace - valid value: verda-vcsmt | ["dev", "qa", "prod"]'
      cluster:
        type: string
        description: "target cluster name with single namespace - empty = all clusters in namespace"
      forks:
        type: string
        description: "ansible parallel execution. default: 5"
jobs:
  generate-namespaces:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo 'matrix='$(jq -nR '[range(100) | {namespace: ("namespace-" + "\(.)")} ]')' >> $GITHUB_ENV

  mysql-agent-version-upgrade:
    name: ${{ matrix.namespace }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      fail-fast: true
      matrix:
        namespace: ${{ fromJson(needs.generate-namespaces.outputs.matrix }}
    env:
      DEPLOYMENT_ENV: ${{ inputs.env }}
      MYSQL_AGENT_VERSION: ${{ inputs.mysql-agent-version }}
      SERVER_AGENT_VERSION: ${{ inputs.server-agent-version }}
      NAMESPACE: ${{ inputs.namespace }}
      CLUSTER: ${{ inputs.cluster }}
      FORKS: ${{ inputs.forks || 5 }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - run: echo ${{matrix.namespace}}
